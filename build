#!/usr/bin/env ruby
require 'YAML'
require 'fileutils'

PROFILE_PATH = "util/profiles"

# TODO: print out build command line if no args provided.

def show_usage
  STDERR.puts "\nusage: ./build [ profile=<name> ] [ --minify ] [ --generate-docs ]"
  STDERR.puts "\nsupported profiles are:"
  Dir.chdir(PROFILE_PATH) do
    STDERR.puts Dir['*.js'].map {|profile| "\t#{profile.sub(/\.js/, '')}"}
  end
  STDERR.puts "\nIf no profile is selected, 'core' will be used\n\n"
  exit(1)
end 

# defaults
profile = "core"
minify = false
docs = false

ARGV.each do |arg|
  case arg
  when "--minify" then minify = true
  when /^profile=(.*)$/ then profile = $1
  when "--generate-docs" then docs = true
  when "--help" then show_usage
  else 
      STDERR.puts("Invalid parameter '#{arg}'") unless arg == "--help"
      show_usage
  end
end
hash = YAML.load_file(File.join(PROFILE_PATH, profile) + ".js")

# clear previous file
target = hash["out"]
target_dir = File.dirname(target)

Dir.mkdir(target_dir) unless File.directory?(target_dir)
File.unlink(target) if File.exist?(target)

content = hash["include"].map {|library| File.read(library + ".js") }

File.open(target, "w") {|op| op.puts content }

if minify
  puts "Minify-ing..."
  `java -jar util/compiler.jar --js=#{ hash["out"] } \
  --js_output_file=#{ hash["out"] }.min`
end

if docs
  XUI_DIR = File.expand_path(File.dirname(__FILE__))
  DOC_DIR = File.join(XUI_DIR, 'doc')
  SRC_DIR = File.join(XUI_DIR, 'src')
  
  FileUtils.rm_r(DOC_DIR) if File.exists?(DOC_DIR)
  FileUtils.mkdir(DOC_DIR)

  FileUtils.cd(SRC_DIR) do
    files = Dir['**/*.js'].reject{ |f| (f =~ /ie\//) != nil }.join(' ')
    `jodoc --output ../doc #{files}`
  end

  # Generate HTML
  puts "Generating documentation as HTML..."
  generate_documentation(HTML_DIR)

  # Generate EJS
  puts "Generating documentation as EJS..."
  generate_documentation(EJS_DIR)
  html_to_ejs(EJS_DIR)
end
