#!/usr/bin/env ruby
require 'YAML'
require 'fileutils'
# TODO: print out build command line if no args provided.
# usage: ./build [profile=whatever] [--minify] [--doc]

# man I sure love Windows! --alunny
is_windows = Dir.getwd[0,1] != "/"
echo_dot = is_windows ? "echo." : "echo"
cat = is_windows ? "type" : "cat"
mkdir = is_windows ? "mkdir" : "mkdir -p"

profile_matcher = /^profile=(.*)$/
profile_path = "util/profiles/"
# defaults
profile = "core"
minify = false
docs = false

$*.each do |arg|
  minify = true if arg == "--minify"
  docs = true if arg == "--doc"
  profile = arg.match(profile_matcher)[1] if arg.match(profile_matcher)
end
hash = YAML.load_file "#{ profile_path }#{ profile }.js"

# clear previous file
`#{ mkdir } lib`
`#{ echo_dot } > #{ hash["out"] }`

hash["include"].each do |include|
  # a bit of overhead since not all files end in a newline
  include = is_windows ? include.gsub("/","\\") : include
  `#{ cat } #{ include }.js >> #{ hash["out"] }`
  `#{ echo_dot } >> #{ hash["out"] }`
end

if minify
  `java -jar util/compiler.jar --js=#{ hash["out"] } \
  --js_output_file=#{ hash["out"] }.min`
end

if docs
  XUI_DIR  = File.expand_path(File.dirname(__FILE__))
  SRC_DIR  = File.join(XUI_DIR, 'src')
  DOC_DIR  = File.join(XUI_DIR, 'doc')
  HTML_DIR = File.join(DOC_DIR, 'html')
  EJS_DIR  = File.join(DOC_DIR, 'ejs')

  def generate_documentation(output_directory)
    output_directory = File.expand_path(output_directory)
    FileUtils.mkdir_p(output_directory)

    FileUtils.cd(SRC_DIR) do
      files = Dir['**/*.js'].reject{ |f| (f =~ /ie\//) != nil }.join(' ')
      `jodoc --title "XUI API Reference" --output #{output_directory} #{files}`
    end
  end

  def html_to_ejs(directory)
    FileUtils.cd(directory) do
      rename = Hash.new

      # Generate EJS filenames
      Dir['**/*'].each do |filename|
        # Remove prefix js_
        # Remove prefix _
        # Rename base to basics
        # Remove .html and .js.html
        # Add extension .ejs
        rename[filename] = filename.sub(/^js_/, '') \
                                   .sub(/^_/, '') \
                                   .sub(/base\./, 'basics.') \
                                   .sub(/\..*html/, '') \
                                   .concat('.ejs')
      end

      # Rename each file
      rename.each { |o, n| FileUtils.mv(o, n) }

      # Alter file content
      Dir['**/*'].each do |filename|
        data = File.read(filename)

        # Only save content of <body>
        data.sub!(/.*<body>(.*)<\/body>.*/mi, "\\1")
        # Update links to each filename
        rename.each { |o, n| data.gsub!(o, File.basename(n, '.ejs')) }

        File.open(filename, 'w') { |file| file.write(data) }
      end
    end
  end

  FileUtils.rm_r(DOC_DIR) if File.exists?(DOC_DIR)

  # Generate HTML
  generate_documentation(HTML_DIR)

  # Generate EJS
  generate_documentation(EJS_DIR)
  html_to_ejs(EJS_DIR)
end
