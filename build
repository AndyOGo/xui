#!/usr/bin/env ruby
require 'YAML'
require 'fileutils'
# TODO: print out build command line if no args provided.
# usage: ./build profile=whatever --minify 

# man I sure love Windows! --alunny
is_windows = Dir.getwd[0,1] != "/"
echo_dot = is_windows ? "echo." : "echo"
mkdir = is_windows ? "mkdir" : "mkdir -p"

profile_matcher = /^profile=(.*)$/
profile_path = "util/profiles/"
# defaults
profile = "core"
minify = false
docs = false

$*.each do |arg|
  minify = true if arg == "--minify"
  docs = true if arg == "--doc"
  profile = arg.match(profile_matcher)[1] if arg.match(profile_matcher)
end
hash = YAML.load_file "#{ profile_path }#{ profile }.js"

# clear previous file
`#{ mkdir } lib`
`#{ echo_dot } > #{ hash["out"] }`

hash["include"].each do |include|
  # a bit of overhead since not all files end in a newline
  `cat #{ include }.js >> #{ hash["out"] }`
  `#{ echo_dot } >> #{ hash["out"] }`
end

if minify
  `java -jar util/compiler.jar --js=#{ hash["out"] } \
  --js_output_file=#{ hash["out"] }.min`
end

if docs
  XUI_DIR = File.expand_path(File.dirname(__FILE__))
  DOC_DIR = File.join(XUI_DIR, 'doc')
  SRC_DIR = File.join(XUI_DIR, 'src')
  
  FileUtils.rm_r(DOC_DIR) if File.exists?(DOC_DIR)
  FileUtils.mkdir(DOC_DIR)

  FileUtils.cd(SRC_DIR) do
    files = Dir['**/*.js'].reject{ |f| (f =~ /ie\//) != nil }.join(' ')
    `jodoc --output ../doc #{files}`
  end
end